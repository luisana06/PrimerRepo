# -*- coding: utf-8 -*-
"""Analisis_exploratorio_vinos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vjnHVlBMmwoqK1ZL2nfdB-wixBovbl_k
"""

# 1. Carga del archivo:
ruta = '/content/winemag-data-130k-v2.csv'
import pandas as pd
df = pd.read_csv(ruta)

# Cambiar nombre de la primera columna
df.rename(columns={'Unnamed: 0': 'id'}, inplace=True)

# Importación de librerías a utilizar
import seaborn as sns
import matplotlib.pyplot as plt

# 2. Análisis exploratorio

# Información general
df.info()

# Resumen estadístico de las variables numéricas (puntuación y precio)
df[['points','price']].describe()

# Distribución de puntuaciones
plt.figure(figsize=(8,6))
sns.histplot(df['points'], bins=20)
plt.title("Distribución de puntuaciones")
plt.ylabel("Frecuencia")
plt.xlabel("Puntuación")
plt.show()

# Distribución de precios
plt.figure(figsize=(8,6))
sns.histplot(df['price'], bins=20, color='red')
plt.title('Distribución de precios')
plt.xlabel('Precio')
plt.ylabel('Frecuencia')
plt.show()

# Frecuencia de los países de origen
paises_frecuencia = df['country'].value_counts()
print(paises_frecuencia.head(10)) # Los 10 países más comunes

# Gráfico de los 10 países más comunes
paises_frecuencia.head(10).plot(kind='bar', color='green')
plt.title("Distribución de países")
plt.ylabel("Frecuencia")
plt.xlabel("País")
plt.show()

# Frecuencia de la variedad de uva
variedad_frecuencia = df['variety'].value_counts()
print(variedad_frecuencia.head(10)) # Las diez variedades más comunes

# Gráfico de las 10 variedades de uva más comunes
variedad_frecuencia.head(10).plot(kind='bar', color='purple')
plt.title("Distribución de variedades")
plt.ylabel("Frecuencia")
plt.xlabel("Variedad de uva")
plt.show()

# Distribución del puntaje por país (promedio)
plt.figure(figsize=(10,6))
puntaje_promedio_pais = df.groupby('country')['points'].mean().sort_values(ascending=False)
puntaje_promedio_pais.plot(kind='bar')
plt.title("Puntaje promedio por país")
plt.ylabel("Puntaje")
plt.xlabel("País")
plt.show()

# Distribución del precio por país (promedio)
plt.figure(figsize=(10,6))
precio_promedio_pais = df.groupby('country')['price'].mean().sort_values(ascending=False)
precio_promedio_pais.plot(kind='bar', color='orange')
plt.title("Precio promedio por país")
plt.ylabel("Precio")
plt.xlabel("País")
plt.show()

# Distribución del puntaje por variedad de uva (promedio)
plt.figure(figsize=(10,6))
puntaje_promedio_variedad = df.groupby('variety')['points'].mean().sort_values(ascending=False).head(10) # Sólo el top 10
puntaje_promedio_variedad.plot(kind='bar', color='brown')
plt.title("Puntaje promedio por variedad de uva")
plt.ylabel("Puntaje")
plt.xlabel("Variedad de uva")
plt.show()

# Distribución del precio por variedad de uva (promedio)
plt.figure(figsize=(10,6))
precio_promedio_variedad = df.groupby('variety')['price'].mean().sort_values(ascending=False).head(10) # Sólo el top 10
precio_promedio_variedad.plot(kind='bar', color='pink')
plt.title("Precio promedio por variedad de uva")
plt.ylabel("Precio")
plt.xlabel("Variedad de uva")
plt.show()

# Crear categorías de precios: baja (de 0 a 100), media (de 100 a 500), alta (de 500 al valor máximo de la columna)
df['price_category'] = pd.cut(df['price'], bins=[0, 100, 500, df['price'].max()], labels=['low', 'medium', 'high'])

# Verificar la distribución.
print(df['price_category'].value_counts())

# Análisis estadístico de los precios separados por categoría: baja, media y alta, respectivamente
print(df['price'][df['price_category'] == 'low'].describe())
print('\n')
print(df['price'][df['price_category'] == 'medium'].describe())
print('\n')
print(df['price'][df['price_category'] == 'high'].describe())

# Gráfico de la puntuación promedio por categoría de precio (bajo, medio y alto)
df.groupby('price_category')['points'].mean().plot(kind='bar', color='yellow')
plt.title('Puntuación promedio por categoría de precio')
plt.xlabel('Categoría de Precio')
plt.ylabel('Puntuación Promedio')
plt.show()

# Tabla que muestre la media de puntuaciones por categoría de precio y país
tabla1 = df.pivot_table(values='points', index='price_category', columns='country', aggfunc='mean')
tabla1

# 3. Tratamiento de datos faltantes

# Verificar si hay datos faltantes
print(df.isnull().sum()) # Se suman los datos faltantes de cada columna

# Calcular el porcentaje de valores faltantes por columna
porcentaje_faltantes = (df.isnull().sum() / len(df)) * 100
print(porcentaje_faltantes)

# Eliminar filas con registros vacíos en 'country' y 'variety'
df_limpio1 = df.dropna(subset=['country'])
df_limpio2 = df_limpio1.dropna(subset=['variety'])
print(df_limpio2[['country','variety']].isnull().sum()) # Verificar

# Imputar valores faltantes en la columna 'price' con el precio promedio de cada país
df_limpio3 = df_limpio2.copy()
df_limpio3['price'] = df_limpio2['price'].fillna(df_limpio2.groupby('country')['price'].transform('mean'))
print(df_limpio3['price'].isnull().sum()) # Verificar si queda algún dato faltante

# Ver el registro con el dato faltante
df_limpio3[df_limpio3['price'].isnull()]

# Se elimina
df_limpio4 = df_limpio3.dropna(subset=['price'])
print(df_limpio4['price'].isnull().sum()) # Verificar

# Volver a crear la variable 'price_category' para que ahora cuente los nuevos valores imputados
df_limpio5 = df_limpio4.copy()
df_limpio5['price_category'] = pd.cut(df_limpio5['price'], bins=[0, 100, 500, df_limpio5['price'].max()], labels=['low', 'medium', 'high'])

# Rellenar los registros vacíos de 'designation', 'region_1', 'region_2', 'taster_name' y 'taster_twitter_handle' con 'Unknown' (desconocido)
df_limpio5['designation'] = df_limpio5['designation'].fillna('Unknown')
df_limpio5['region_1'] = df_limpio5['region_1'].fillna('Unknown')
df_limpio5['region_2'] = df_limpio5['region_2'].fillna('Unknown')
df_limpio5['taster_name'] = df_limpio5['taster_name'].fillna('Unknown')
df_limpio5['taster_twitter_handle'] = df_limpio5['taster_twitter_handle'].fillna('Unknown')

# Ver si quedaron datos faltantes
print(df_limpio5.isnull().sum())

# Mostrar resultados de los 10 primeros registros del dataframe limpio
df_limpio5.head(10)

# 4. Análisis de datos atípicos

# Boxplot del precio separado por categorías
plt.figure(figsize=(10,6))
sns.boxplot(x='price_category', y='price', data=df_limpio5)
plt.title('Distribución del precio')
plt.xlabel('Categoría')
plt.ylabel('Precio')
plt.show()

# Boxplot de las puntuaciones separadas por categoría de precio
plt.figure(figsize=(10, 6))
sns.boxplot(x='price_category', y='points', data=df_limpio5)
plt.xlabel('Categoria de precio')
plt.ylabel('Puntos')
plt.title('Distribución de puntuaciones')
plt.show()

